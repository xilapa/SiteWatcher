// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SiteWatcher.Domain.Models.Common;
using SiteWatcher.Domain.Models.Emails;
using SiteWatcher.Infra.Persistence.Configuration;

#pragma warning disable 219, 612, 618
#nullable enable

namespace PersistenceCompiledModels
{
    internal partial class EmailEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SiteWatcher.Domain.Models.Emails.Email",
                typeof(Email),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(EmailId),
                propertyInfo: typeof(Email).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Email).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new EmailIdValueGeneratorFactory().Create,
                valueConverter: new EmailId.EfCoreValueConverter());
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            id.AddAnnotation("Relational:ColumnType", "int");

            var body = runtimeEntityType.AddProperty(
                "Body",
                typeof(string),
                propertyInfo: typeof(Email).GetProperty("Body", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Email).GetField("<Body>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            body.AddAnnotation("Relational:ColumnType", "text");

            var dateSent = runtimeEntityType.AddProperty(
                "DateSent",
                typeof(DateTime),
                propertyInfo: typeof(Email).GetProperty("DateSent", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Email).GetField("<DateSent>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            dateSent.AddAnnotation("Relational:ColumnType", "timestamptz");

            var errorMessage = runtimeEntityType.AddProperty(
                "ErrorMessage",
                typeof(string),
                propertyInfo: typeof(Email).GetProperty("ErrorMessage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Email).GetField("<ErrorMessage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            errorMessage.AddAnnotation("Relational:ColumnType", "text");

            var recipients = runtimeEntityType.AddProperty(
                "Recipients",
                typeof(List<EmailRecipient>),
                propertyInfo: typeof(Email).GetProperty("Recipients", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Email).GetField("<Recipients>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new EmailRecipientsValueConverter());

            var subject = runtimeEntityType.AddProperty(
                "Subject",
                typeof(string),
                propertyInfo: typeof(Email).GetProperty("Subject", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Email).GetField("<Subject>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            subject.AddAnnotation("Relational:ColumnType", "varchar(255)");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "siteWatcher_webApi");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Emails");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
