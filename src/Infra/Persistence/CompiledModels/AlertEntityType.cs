// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SiteWatcher.Domain.Enums;
using SiteWatcher.Domain.Models;
using SiteWatcher.Domain.Models.Alerts;
using SiteWatcher.Domain.Models.Common;
using SiteWatcher.Infra.Persistence.Configuration;

#pragma warning disable 219, 612, 618
#nullable enable

namespace PersistenceCompiledModels
{
    internal partial class AlertEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SiteWatcher.Domain.Models.Alerts.Alert",
                typeof(Alert),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(AlertId),
                propertyInfo: typeof(BaseModel<AlertId>).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel<AlertId>).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                valueGeneratorFactory: new AlertIdValueGeneratorFactory().Create,
                valueConverter: new AlertId.EfCoreValueConverter());
            id.AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            id.AddAnnotation("Relational:ColumnType", "integer");

            var active = runtimeEntityType.AddProperty(
                "Active",
                typeof(bool),
                propertyInfo: typeof(BaseModel<AlertId>).GetProperty("Active", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel<AlertId>).GetField("<Active>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            active.AddAnnotation("Relational:ColumnType", "boolean");

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTime),
                propertyInfo: typeof(BaseModel<AlertId>).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel<AlertId>).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            createdAt.AddAnnotation("Relational:ColumnType", "timestamptz");

            var frequency = runtimeEntityType.AddProperty(
                "Frequency",
                typeof(EFrequency),
                propertyInfo: typeof(Alert).GetProperty("Frequency", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Alert).GetField("<Frequency>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            frequency.AddAnnotation("Relational:ColumnType", "smallint");

            var lastUpdatedAt = runtimeEntityType.AddProperty(
                "LastUpdatedAt",
                typeof(DateTime),
                propertyInfo: typeof(BaseModel<AlertId>).GetProperty("LastUpdatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(BaseModel<AlertId>).GetField("<LastUpdatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            lastUpdatedAt.AddAnnotation("Relational:ColumnType", "timestamptz");

            var lastVerification = runtimeEntityType.AddProperty(
                "LastVerification",
                typeof(DateTime?),
                propertyInfo: typeof(Alert).GetProperty("LastVerification", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Alert).GetField("<LastVerification>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            lastVerification.AddAnnotation("Relational:ColumnType", "timestamptz");

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(Alert).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Alert).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.AddAnnotation("Relational:ColumnType", "varchar(64)");

            var searchField = runtimeEntityType.AddProperty(
                "SearchField",
                typeof(string),
                propertyInfo: typeof(Alert).GetProperty("SearchField", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Alert).GetField("<SearchField>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            searchField.AddAnnotation("Relational:ColumnType", "varchar(640)");

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(UserId),
                propertyInfo: typeof(Alert).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Alert).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new UserId.EfCoreValueConverter());
            userId.AddAnnotation("Relational:ColumnType", "uuid");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { userId });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("UserId")! },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id")! })!,
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var user = declaringEntityType.AddNavigation("User",
                runtimeForeignKey,
                onDependent: true,
                typeof(User),
                propertyInfo: typeof(Alert).GetProperty("User", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Alert).GetField("<User>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var alerts = principalEntityType.AddNavigation("Alerts",
                runtimeForeignKey,
                onDependent: false,
                typeof(IEnumerable<Alert>),
                propertyInfo: typeof(User).GetProperty("Alerts", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(User).GetField("<Alerts>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "siteWatcher_webApi");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Alerts");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
